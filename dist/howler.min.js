!function(a,b,c){"use strict";function d(a){g.call(this,a),this.sounds=new f.Map}function e(a,b){return a+"/"+b}var f=a.lib,g=c.BasicResourceLoader,h={type:"object",properties:{sounds:{type:"array",items:{type:"object",properties:{name:{type:"string"},baseURL:{type:"string"},files:{type:"array",items:{type:"string"},volume:{type:"number",min:0,max:1},minItems:1},sprite:{type:"object"}},required:["files","name"]},minItems:1}},additionalProperties:!1};f.inherit(d,g),d.prototype.__cleanUp=function(){this.sounds.destroy(),this.sounds=null,g.prototype.__cleanUp.call(this)},d.prototype.load=function(){var a=f.q.all(this.getConfigVal("sounds").map(this._loadASound.bind(this)));return a.done(console.log.bind(console,"done"),console.log.bind(console,"failed")),a},d.prototype._loadASound=function(a){var b=f.q.defer(),c=new Howl({src:a.files.map(e.bind(null,a.baseURL)),autoplay:!1,volume:"volume"in a?a.volume:1,loop:!1,preload:!0,mute:!1,onload:b.resolve.bind(b,!0),onloaderror:this._failed.bind(this,b)});return this.sounds.add(a.name,c),b.promise},d.prototype._failed=function(a){console.log("failed to load",arguments),a.reject(new Error("failed"))},d.prototype.getSound=function(a){return this.sounds.get(a)},d.prototype.muteAllSounds=Howler.mute.bind(Howler),d.prototype.CONFIG_SCHEMA=function(){return h},d.prototype.DEFAULT_CONFIG=function(){return null},b.resources.HowlerResource=d,c.registerResourceType("Howler",d)}(ALLEX,ALLEX.WEB_COMPONENTS.allex_web_webappcomponent,ALLEX.WEB_COMPONENTS.allex_applib);